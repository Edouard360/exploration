import numpy as np
from exploitation.heuristic import inner_outer_heuristics,complete_with_random_indices



def get_top_discord(series, w_length = 25, use_heuristic = True):
    ts_length = len(series)
    n = w_length # paper notation - length of pattern
    highest_dist = 0
    inner_indices = range(ts_length - n)
    if use_heuristic == True:
        a = 3 # number of symbols
        w = 5 # length of word
        inner_indices, word_list, trie = inner_outer_heuristics(series, w_length,a,w)
    for i in inner_indices:
        outer_sample = series[i:i+n]
        nn_dist = np.inf
        outer_indices = range(ts_length - n)
        if use_heuristic == True:
            first_indices = trie.get_word_indices(word_list[i])
            outer_indices = complete_with_random_indices(first_indices,ts_length - n)
        for j in outer_indices:
            if(abs(i-j)<n):
                continue
            inner_sample = series[j:j+n]
            d = np.linalg.norm(outer_sample - inner_sample)
            if d < highest_dist:
                nn_dist = d # not written in the algorithm, but necessary
                break
            if d < nn_dist:
                nn_dist = d
        if nn_dist > highest_dist:
            highest_dist = nn_dist
            best_index = i
    return best_index, highest_dist

""" Naive version of the algorithm that can be generalized
def get_top_discord(series, w_length):
    ts_length = len(series)
    n = w_length # paper notation
    highest_dist = 0
    for i in range(ts_length - n):
        outer_sample = series[i:i+n]
        nn_dist = np.inf
        for j in range(ts_length - n):
            if(abs(i-j)<n):
                continue
            inner_sample = series[j:j+n]
            d = np.linalg.norm(outer_sample - inner_sample)
            if d < highest_dist:
                nn_dist = d # not written in the algorithm, but necessary
                break
            if d < nn_dist:
                nn_dist = d
        if nn_dist > highest_dist:
            highest_dist = nn_dist
            best_index = i
    return best_index, highest_dist
"""

    
