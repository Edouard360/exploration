#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 02 08:23:37 2017

@author: edouardm
"""
from exploitation.unusual_subsequence import get_top_discord
from insight_tools import plot,annotate
import matplotlib.pyplot as plt
import numpy as np
from exploitation.potential import sliding_variance,sliding_autocovariance

class Exploitation:
    """
    The Exploitation class with usage for dataframes:
    Translate dataframes to regular time series and handle plot for exploitation
    """
    def __init__(self,df):
        self.df = df
        self.top_discord = None

    def compute_top_discord(self,w_length = 25,**kargs):
        values = self.df[self.df.columns[0]].values
        best_index, highest_dist = get_top_discord(values,w_length,**kargs)
        self.top_discord = {"start":self.df.index[best_index],"end":self.df.index[best_index+w_length]}
    
    def correlation_plot(self,w_length=100,percentile = 5,**kargs):
        corr_df = self.df.rolling(w_length,axis=0).corr().min(axis=2).min(axis=0)
        index_low_correlation = corr_df <= np.percentile(corr_df[~np.isnan(corr_df)],percentile)
        
        fig,axes = plt.subplots(nrows=2,ncols=1,figsize=(15, 10))
        ax_df = plot(self.df,ax=axes[0])
        plot(corr_df,ax=axes[1])
        
        ymin, ymax = ax_df.get_ylim()
        ax_df.vlines(x=corr_df.index[index_low_correlation], ymin=ymin, ymax=ymax, color='k',alpha=0.8)
    
    def variation_plot(self,w_length=4,percentile = 95,**kargs):
        var_df = self.df.diff().var(axis=1).rolling(w_length).mean().ix[:-1]
        index_high_variation = var_df >= np.percentile(var_df[~np.isnan(var_df)],percentile)
        
        fig,axes = plt.subplots(nrows=2,ncols=1,figsize=(15, 10))
        ax_df = plot(self.df,ax=axes[0])
        plot(var_df,ax=axes[1])
        
        ymin, ymax = ax_df.get_ylim()
        ax_df.vlines(x=var_df.index[index_high_variation], ymin=ymin, ymax=ymax, color='k',alpha=0.8)

    def potential_plot(self,w_var = 30,w_auto = 30, lag_auto = 5, column_name=None, y_sup = 1000):
        fig, axes = plt.subplots(nrows=3, ncols=1, figsize=(8, 10), sharex=True)
        plot(self.df, ax = axes[0],legend=False)
        column_name = column_name if column_name is not None else self.df.columns[0]
        column = self.df[column_name]
        sliding_var = sliding_variance(column.values,w_var)
        sliding_auto = sliding_autocovariance(column.values,w_auto,lag_auto)
        column = column.to_frame()
        column = column.assign(sliding_variance =sliding_var,sliding_autocovariance = sliding_auto)  
        plot(column["sliding_variance"], title = "Sliding Variance of "+column_name,ax = axes[1], scale_index_lag = 30, y_sup = y_sup)
        annotate(axes[1], column["sliding_variance"],w_var,"w_var")
        plot(column["sliding_autocovariance"], title = "Sliding Autocovariance of "+column_name,ax=axes[2], scale_index_lag = 30, y_sup = y_sup)
        annotate(axes[2], column["sliding_autocovariance"],w_auto,"w_auto")       
        
    def plot(self,**kargs):
        fig, ax = plt.subplots()
        plot(self.df,ax = ax, color='b',legend=False,**kargs)
        if self.top_discord is not None:
            plot(self.df[self.top_discord["start"]:self.top_discord["end"]],ax = ax, color='r',legend=False,**kargs)