# -*- coding: utf-8 -*-
"""
Created on Wed Apr 19 12:31:45 2017

@author: edouardm
"""
import numpy as np
import pandas as pd

def sliding_variance(y, w_length):
    """
    :param y: The series on which to perform the variance and autocovariance analysis
    :param w_length: The length of the window
    :return: An series of the same lenght than y (with nan values at the beginning)
    """
    sample_size = len(y)
    sliding_variance = [np.var(y[i:i + w_length]) for i in range(sample_size - w_length + 1)]
    return np.concatenate((np.repeat(np.nan, w_length - 1), np.array(sliding_variance)))


def autocovariance(y_t1, y_t2, autocorrelation=False):
    assert y_t1.size == y_t2.size
    cov = (1 / y_t1.size) * (np.correlate(y_t1, y_t2)[0]) - np.mean(y_t1) * np.mean(y_t2)
    if autocorrelation == True:
        cov = cov / (np.var(y_t1)+1e-5)  # var(y_t1) varies...
        # Maybe it has only meaning for the ARIMA process
    return cov


def sliding_autocovariance(y, w_length, lag, autocorrelation=False):
    sample_size = len(y)
    sliding_autocovariance = [autocovariance(y[i:i + w_length], y[i + lag:i + w_length + lag], autocorrelation) for i in
                              range(sample_size - (w_length + lag) + 1)]
    return np.concatenate((np.repeat(np.nan, w_length + lag - 1), np.array(sliding_autocovariance)))


def summary_variance_autocovariance(healthy_ts,unhealthy_ts, w_length=300, lag_autocorrelation=5):
    columns = list(unhealthy_ts[0].columns)
    summary = pd.DataFrame(0, index= columns,columns=["MnVa Un","MnVa He","MdVa Un","MdVa He","MnAu Un","MnAu He","MdAu Un","MdAu He"])

    for column in columns:
        variance_score_list_ts = lambda list_ts: np.array(
            [np.nanmean(sliding_variance(ts.values.ravel(), w_length)) for ts in list_ts if len(ts) > w_length])

        autocovariance_score_list_ts = lambda list_ts: np.array(
            [np.nanmean(sliding_autocovariance(ts.values.ravel(), w_length, lag=lag_autocorrelation, autocorrelation=True)) for ts in list_ts
             if len(ts) > w_length+lag_autocorrelation])

        _unhealthy_ts = [ts[column] for ts in unhealthy_ts]
        _healthy_ts = [ts[column] for ts in healthy_ts]
        variance_unhealthy_scores = variance_score_list_ts(_unhealthy_ts)
        variance_healthy_scores = variance_score_list_ts(_healthy_ts)

        autocovariance_unhealthy_scores = autocovariance_score_list_ts(_unhealthy_ts)
        autocovariance_healthy_scores = autocovariance_score_list_ts(_healthy_ts)
        variance = [np.mean(variance_unhealthy_scores), np.mean(variance_healthy_scores), np.median(
            variance_unhealthy_scores), np.median(variance_healthy_scores)]
        autocovariance = [np.mean(autocovariance_unhealthy_scores), np.mean(autocovariance_healthy_scores), np.median(
            autocovariance_unhealthy_scores), np.median(autocovariance_healthy_scores)]
        summary.ix[column] = variance+autocovariance

    return summary