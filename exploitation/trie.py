from abc import ABCMeta, abstractmethod

class Trie:
    __metaclass__ = ABCMeta

    @abstractmethod
    def add_word_index(self, word, index):
        pass

    @abstractmethod
    def get_word_indices(self, word):
        pass


class Leaf(Trie):
    def __init__(self):
        self.indices = []

    def add_word_index(self, word, index):
        assert word == '', "word is too long for dictionary"
        self.indices.append(index)

    def get_word_indices(self, word):
        assert word == '', "word is not in dictionary"
        return self.indices


class Node(Trie):
    def __init__(self, depth):
        self.children = dict()
        self.depth = depth

    def add_word_index(self, word, index):
        letter = word[0]
        _word = word[1:]
        if letter not in self.children:
            child_depth = self.depth - 1
            self.children[letter] = Node(child_depth) if (child_depth != 0) else Leaf()
        self.children[letter].add_word_index(_word, index)

    def get_word_indices(self, word):
        letter = word[0]
        _word = word[1:]
        if letter not in self.children:
            return []
        else:
            return self.children[letter].get_word_indices(_word)
